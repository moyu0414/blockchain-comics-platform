import { ClassNameType } from './core/classNames';
import { BoxStyleProps, ExtractElementFromTag } from './core/types';
import { default as React, Ref, RefAttributes } from 'react';

type AllProps<TTag extends keyof React.JSX.IntrinsicElements> = React.ComponentProps<TTag>;
type TagPropsType<TTag extends keyof React.JSX.IntrinsicElements> = Omit<AllProps<TTag>, 'className' | 'style' | 'ref' | 'disabled'>;
interface Props<TTag extends keyof React.JSX.IntrinsicElements> extends BoxStyleProps {
    children?: React.ReactNode | ((props: {
        isHover: boolean;
    }) => React.ReactNode);
    tag?: TTag;
    props?: TagPropsType<TTag>;
    className?: ClassNameType;
    style?: React.ComponentProps<TTag>['style'];
}
declare function Box<TTag extends keyof React.JSX.IntrinsicElements = 'div'>(props: Props<TTag>, ref: Ref<ExtractElementFromTag<TTag>>): React.ReactElement<React.ComponentProps<TTag>, string | React.JSXElementConstructor<any>>;
declare const _default: <TTag extends keyof React.JSX.IntrinsicElements = "div">(props: Props<TTag> & RefAttributes<ExtractElementFromTag<TTag>>) => React.ReactNode;
export default _default;
export type BoxProps<TTag extends keyof React.JSX.IntrinsicElements = 'div'> = React.ComponentProps<typeof Box<TTag>>;
export type BoxTagProps<TTag extends keyof React.JSX.IntrinsicElements = 'div'> = Required<BoxProps<TTag>>['props'];
