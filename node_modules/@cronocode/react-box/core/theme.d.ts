import { BoxStyleProps, BoxThemeProps } from './types';

export interface ThemeStyles<T> {
    styles: T;
}
export interface ThemeComponentStyles<T = BoxStyleProps> extends ThemeStyles<T> {
    themes?: {
        [name: string]: T;
    };
    children?: {
        [name: string]: ThemeComponentStyles<T>;
    };
}
export interface ThemeSetup<T = BoxStyleProps> {
    components?: {
        [name: string]: ThemeComponentStyles<T>;
    };
    button?: ThemeComponentStyles<T>;
    textbox?: ThemeComponentStyles<T>;
    textarea?: ThemeComponentStyles<T>;
    checkbox?: ThemeComponentStyles<T>;
    radioButton?: ThemeComponentStyles<T>;
}
interface BoxAugmentedProps {
    colors?: Record<string, string>;
    shadows?: Record<string, string>;
    backgrounds?: Record<string, string>;
    backgroundImages?: Record<string, string>;
}
declare namespace Theme {
    let Styles: ThemeSetup<BoxStyleProps>;
    function setup(styles: ThemeSetup<BoxThemeProps>): void;
    function setupAugmentedProps(props: BoxAugmentedProps, options?: {
        namespacePath?: string;
    }): {
        variables: string;
        boxDts: string;
    };
}
export default Theme;
