import { BoxStylesFormatters } from './boxStylesFormatters';

export interface StyleValues {
    values: Readonly<Array<unknown>>;
    formatSelector?: (selector: string) => string[];
    formatValue?: (key: string, value: any) => string;
}
export interface ThemeItem {
    cssNames: string[];
    formatSelector?: (selector: string) => string[];
    formatValue?: (key: string, value: any) => string;
}
export interface StyleItem {
    cssNames: string[];
    values1: StyleValues;
    values2: StyleValues;
    values3: StyleValues;
    pseudoSuffix?: PseudoClassSuffix;
    customPseudoSuffix?: string;
    breakpoint?: BoxBreakpointsType;
    isThemeStyle?: boolean;
}
export declare const simpleBoxStyles: {
    /** The `display` CSS property sets whether an element is treated as a block or inline box and the layout used for its children, such as flow layout, grid or flex. */
    display: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "block", "inline-block", "flex", "inline-flex", "grid", "inline-grid", "contents"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    /** The `inline` property is a shortcut to transform `block`, `flex` and `grid` value to `inline-block`, `inline-flex` and `inline-grid` respectively. */
    inline: {
        cssNames: string[];
        values1: {
            values: readonly [true];
            formatValue: () => string;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    /** The `box-sizing` CSS property sets how the total width and height of an element is calculated. */
    boxSizing: {
        cssNames: string[];
        values1: {
            values: readonly ["border-box", "content-box"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    width: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    minWidth: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    maxWidth: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    height: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    minHeight: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    maxHeight: {
        cssNames: string[];
        values1: {
            values: readonly ["fit", "fit-screen", "auto", "fit-content", "max-content", "min-content"];
            formatValue: typeof BoxStylesFormatters.Value.widthHeight;
        };
        values2: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values3: {
            values: readonly ["1/2", "1/3", "2/3", "1/4", "2/4", "3/4", "1/5", "2/5", "3/5", "4/5", "1/6", "2/6", "3/6", "4/6", "5/6", "1/12", "2/12", "3/12", "4/12", "5/12", "6/12", "7/12", "8/12", "9/12", "10/12", "11/12"];
            formatValue: typeof BoxStylesFormatters.Value.fraction;
        };
    };
    position: {
        cssNames: string[];
        values1: {
            values: readonly ["static", "relative", "absolute", "fixed", "sticky"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    top: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    right: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    bottom: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    left: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    inset: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    m: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    mx: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    my: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    mt: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    mr: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    mb: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    ml: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly ["auto"];
        };
        values3: {
            values: readonly [];
        };
    };
    p: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    px: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    py: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    pt: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    pr: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    pb: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    pl: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    b: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    bx: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    by: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    bt: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    br: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    bb: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    bl: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -44, -48, -52, -56, -60, -64, -68, -72, -76, -80, -84, -88, -92, -96, -100];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderStyle: {
        cssNames: string[];
        values1: {
            values: readonly ["solid", "dashed", "dotted", "double", "groove", "ridge", "inset", "outset", "none", "hidden"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadius: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusTop: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusRight: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusBottom: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusLeft: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusTopLeft: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusTopRight: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusBottomLeft: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    borderRadiusBottomRight: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    cursor: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "default", "none", "context-menu", "help", "pointer", "progress", "wait", "cell", "crosshair", "text", "vertical-text", "alias", "copy", "move", "no-drop", "not-allowed", "e-resize", "n-resize", "ne-resize", "nw-resize", "s-resize", "se-resize", "sw-resize", "w-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "col-resize", "row-resize", "all-scroll", "zoom-in", "zoom-out", "grab", "grabbing"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    zIndex: {
        cssNames: string[];
        values1: {
            values: readonly [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 100, 101, 102, 103, 104, 105, 1000, 1001, 1002, 1003, 1004, 1005];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    overflow: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "hidden", "scroll", "visible"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    overflowX: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "hidden", "scroll", "visible"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    overflowY: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "hidden", "scroll", "visible"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    opacity: {
        cssNames: string[];
        values1: {
            values: readonly [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    fontSize: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly ["inherit"];
        };
        values3: {
            values: readonly [];
        };
    };
    fontStyle: {
        cssNames: string[];
        values1: {
            values: readonly ["italic", "normal", "oblique"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    fontWeight: {
        cssNames: string[];
        values1: {
            values: readonly [100, 200, 300, 400, 500, 600, 700, 800, 900];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    letterSpacing: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    lineHeight: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly ["font-size"];
            formatValue: () => string;
        };
        values3: {
            values: readonly [];
        };
    };
    textDecoration: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "underline", "overline", "line-through"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    textTransform: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "capitalize", "lowercase", "uppercase"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    textAlign: {
        cssNames: string[];
        values1: {
            values: readonly ["left", "right", "center", "justify"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    flexWrap: {
        cssNames: string[];
        values1: {
            values: readonly ["nowrap", "wrap", "wrap-reverse"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    jc: {
        cssNames: string[];
        values1: {
            values: readonly ["start", "end", "flex-start", "flex-end", "center", "left", "right", "space-between", "space-around", "space-evenly", "stretch"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    ai: {
        cssNames: string[];
        values1: {
            values: readonly ["stretch", "flex-start", "flex-end", "center", "baseline", "start", "end", "self-start", "self-end"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    alignContent: {
        cssNames: string[];
        values1: {
            values: readonly ["flex-start", "flex-end", "center", "space-between", "space-around", "space-evenly", "stretch", "start", "end", "baseline"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    flex1: {
        cssNames: string[];
        values1: {
            values: readonly [true];
            formatValue: () => string;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    d: {
        cssNames: string[];
        values1: {
            values: readonly ["row", "row-reverse", "column", "column-reverse"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    gap: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    rowGap: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    columnGap: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.rem;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    order: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    flexGrow: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    flexShrink: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    alignSelf: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "flex-start", "flex-end", "center", "baseline", "stretch"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    justifySelf: {
        cssNames: string[];
        values1: {
            values: readonly ["auto", "flex-start", "flex-end", "center", "baseline", "stretch"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    gridColumns: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.gridColumns;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    colSpan: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.gridColumn;
        };
        values2: {
            values: readonly ["full-row"];
            formatValue: typeof BoxStylesFormatters.Value.gridColumn;
        };
        values3: {
            values: readonly [];
        };
    };
    colStart: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    colEnd: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    outline: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    outlineStyle: {
        cssNames: string[];
        values1: {
            values: readonly ["solid", "dashed", "dotted", "double", "groove", "ridge", "inset", "outset", "none", "hidden"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    outlineOffset: {
        cssNames: string[];
        values1: {
            values: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 110, 120, 128, 130, 140, 150, 160, 170, 180, 190, 192, 200, 225, 250, 256, 275, 300, 320, 350, 384, 400];
            formatValue: typeof BoxStylesFormatters.Value.px;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    transition: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "all"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    transitionDuration: {
        cssNames: string[];
        values1: {
            values: readonly [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000];
            formatValue: typeof BoxStylesFormatters.Value.ms;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    userSelect: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "auto", "text", "all"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    appearance: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "auto", "menulist-button", "textfield", "button", "checkbox"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    pointerEvents: {
        cssNames: string[];
        values1: {
            values: readonly ["none", "auto", "all"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    whiteSpace: {
        cssNames: string[];
        values1: {
            values: readonly ["break-spaces", "normal", "nowrap", "pre", "pre-line", "pre-wrap"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    textOverflow: {
        cssNames: string[];
        values1: {
            values: readonly ["clip", "ellipsis"];
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    rotate: {
        cssNames: string[];
        values1: {
            values: readonly [0, 90, 180, 270, -90, -180, -270];
            formatValue: typeof BoxStylesFormatters.Value.rotate;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
    flip: {
        cssNames: string[];
        values1: {
            values: readonly ["xAxis", "yAxis"];
            formatValue: typeof BoxStylesFormatters.Value.flip;
        };
        values2: {
            values: readonly [];
        };
        values3: {
            values: readonly [];
        };
    };
};
export type StyleKey = keyof typeof simpleBoxStyles;
export declare const boxThemeStyles: {
    shadow: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    background: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    backgroundImage: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    color: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    bgColor: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    borderColor: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
    outlineColor: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
    };
};
export declare const svgThemeStyles: {
    fill: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
        formatSelector: typeof BoxStylesFormatters.ClassName.svg;
    };
    stroke: {
        cssNames: string[];
        formatValue: (key: string, value: string) => string;
        formatSelector: typeof BoxStylesFormatters.ClassName.svg;
    };
};
export declare const pseudoClassSuffixes: readonly ["Hover", "Focus", "Active", "Checked", "Indeterminate", "Valid", "Invalid", "Required", "Optional", "Disabled"];
export type PseudoClassSuffix = (typeof pseudoClassSuffixes)[number];
export declare const boxBreakpoints: readonly ["sm", "md", "lg", "xl", "xxl"];
export type BoxBreakpointsType = (typeof boxBreakpoints)[number];
export declare const boxBreakpointsMinWidth: Record<BoxBreakpointsType, number>;
export declare let boxStyles: Record<string, StyleItem>;
export declare function rebuildBoxStyles(): void;
export declare function addCustomPseudoClassProps(suffix: PseudoClassSuffix, customName: string, parentKey: string): string[];
