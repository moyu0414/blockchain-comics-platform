class IdentityFactory {
  constructor() {
    this._index = 0;
    this._cache = {};
  }
  getIdentity(key) {
    if (!this._cache[key]) {
      this._cache[key] = this.getByIndex(this._index++);
    }
    return this._cache[key];
  }
  getByIndex(index) {
    const { first, next } = keyCrumbs;
    const nextIndex = index - first.length;
    if (nextIndex < 0) {
      return first[index];
    }
    const cycles = Math.floor(nextIndex / next.length);
    const symbolIndex = nextIndex - cycles * next.length;
    return this.getByIndex(cycles) + next[symbolIndex];
  }
}
const keyCrumbs = {
  first: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
  next: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
};
export { IdentityFactory as default };
